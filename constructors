**constructors:-
               
    Nothing but starting point of a class.Setting a default value. 
    
    27-10-2022:- 

>>Constructors: 

We can access the class with instance.
  
           It is a starting point of a class.Sets the default value.

--It is a special function of class automatically invoked when we create an instance of class in ts.

--Using constructor parameter properties or parameter shorthand syntax we can add new properties to the class.

--Can create multiple constructors using technique of constructor method overload.

a) Creating class contsructor:-

e.g.,class Person {
 
    constructor() {

    console.log("Constructor is called")
  }
} 
 
let p1= new Person()    //contructor is called
 
let p2= new Person()    //contructor is called

b) parameter to contructor:-

   Constructors are like just functions in this way they can also accept parameters.

e.g.,Class Person {

     firstName:string;

     lastName:string;
 
    constructor(fName:string, lName:string) {

    this.firstName=fName;

    this.lastName=lName;
  }
} 

we can access the current instance using 'this' inside the contsructor.Once it finisished constructor function returns new object. 

let p= new Person("Jon","Snow")  

console.log(p) 

When we instantiate the class,we must pass the values of all arguments to constructor. 

If we donot pass all the parameters/arguments,then it will result a compiler error.

 
>>Constructor parameters/modifiers:-

 These are like agents.Offers special shorthand syntax to convert parameters of constructor function into properties.

 a) Readonly--Values cant be changed & only one instance is used.

 b) Cont--Values cant be changed but when instance is changed then we can change values.

 c) public--This parameter can be exposed outside the class itself. 

 d) Private--This cant be exposed outside the class, only in the calss it can be seen.

    
